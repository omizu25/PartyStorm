//=============================================================================
//
// 当たり判定クラス(collision.h)
// Author : 唐﨑結斗
// 概要 : 当たり判定生成を行う
//
//=============================================================================
#ifndef _COLLISION_H_			// このマクロ定義がされてなかったら
#define _COLLISION_H_			// 二重インクルード防止のマクロ定義

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "object.h"
#include "main.h"

//=============================================================================
// 当たり判定クラス
// Author : 唐﨑結斗
// 概要 : 当たり判定生成を行うクラス
//=============================================================================
class CCollision
{
public:
	//--------------------------------------------------------------------
	// 静的メンバ関数
	//--------------------------------------------------------------------
	static void ReleaseAll();					// すべてのオブジェクトの解放
	static void UpdateAll();					// すべてのオブジェクトの更新
	static void DrawAll();						// すべてのオブジェクトの描画
	static void ReleaseListAll();				// すべてのオブジェクトのリスト解除

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	explicit CCollision();
	virtual ~CCollision();

	//--------------------------------------------------------------------
	// 純粋仮想関数
	//--------------------------------------------------------------------
	HRESULT Init();									// 初期化
	void Uninit();									// 終了
	void Update();									// 更新
	void Draw();									// 描画
	void SetPos(const D3DXVECTOR3 &pos);			// 位置のセッター
	void SetRot(const D3DXVECTOR3 &rot);			// 向きのセッター
	void SetSize(const D3DXVECTOR3 &size);			// 大きさのセッター
	D3DXVECTOR3 GetPos();							// 位置のゲッター
	D3DXVECTOR3 GetRot();							// 向きのゲッター
	D3DXVECTOR3 GetSize();							// 大きさのゲッター
	bool GetFlagDeath() { return m_bDeath; }		// 死亡フラグの取得

protected:
	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	void Release(void);			// オブジェクトの解放
	void ReleaseList(void);		// オブジェクトのリスト解除

private:
	//--------------------------------------------------------------------
	// 静的メンバ変数
	//--------------------------------------------------------------------
	static CObject *m_pTop;				// 先頭オブジェクトへのポインタ
	static CObject *m_pCurrent;			// 現在の(一番後ろ)オブジェクトへのポインタ

	//--------------------------------------------------------------------
	// メンバ変数
	//--------------------------------------------------------------------
	CObject *m_pPrev;				// 前のオブジェクトへのポインタ
	CObject *m_pNext;				// 次のオブジェクトへのポインタ
	CObject *m_pParent;				// 親オブジェクトへのポインタ
	bool m_bDeath;					// 死亡フラグ
};

#endif

