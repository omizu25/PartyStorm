//=============================================================================
//
// プレイヤークラス(player.h)
// Author : 唐﨑結斗
// 概要 : プレイヤー生成を行う
//
//=============================================================================
#ifndef _PLAYER_H_			// このマクロ定義がされてなかったら
#define _PLAYER_H_			// 二重インクルード防止のマクロ定義

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "motion_model3D.h"
#include "main.h"

//*****************************************************************************
// 前方宣言
//*****************************************************************************
class CMove;
class CLine;
class CObject3D;

//=============================================================================
// プレイヤークラス
// Author : 唐﨑結斗
// 概要 : プレイヤー生成を行うクラス
//=============================================================================
class CPlayer : public CMotionModel3D
{
public:
	//--------------------------------------------------------------------
	// 定数定義
	//--------------------------------------------------------------------
	static const D3DXVECTOR2 MAX_VIB_RAND;		// 振動の幅
	static const float VIB_SPEED;				// 振動の速度
	static const float VIB_COEFFICIENT;			// 振動の減衰値

	//--------------------------------------------------------------------
	// プレイヤーのアクションの列挙型
	//--------------------------------------------------------------------
	enum ACTION_TYPE
	{
		NEUTRAL_ACTION = 0,		// ニュートラル
		MOVE_ACTION,			// 移動
		ATTACK_ACTION,			// 攻撃
		MAX_ACTION,				// 最大数
	};

	//--------------------------------------------------------------------
	// 静的メンバ関数
	//--------------------------------------------------------------------
	static CPlayer *Create();			// プレイヤーの生成

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	CPlayer();
	~CPlayer();

	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	virtual HRESULT Init();											// 初期化
	void Uninit() override;											// 終了
	void Update() override;											// 更新
	void Draw() override;											// 描画
	void SetSpeed(const float fSpeed) { m_fSpeed = fSpeed; }		// 移動速度の設定
	CMove *GetMove() { return m_pMove; }							// 移動情報の取得
	void SetNum(const int nNum);									// 識別番号の設定
	bool GetDead() { return m_bDead; }								// 死亡状況の取得
	void SetAction(bool bAction) { m_bAction = bAction; }			// 行動できるかの設定
	void SetMove(bool bMove) { m_bMove = bMove; }					// 移動できるかの設定

#ifdef _DEBUG
	void SetLine();					// ラインの設定
#endif // _DEBUG
	
private:
	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	D3DXVECTOR3 Move();		// 移動
	void Rotate();			// 回転
	void Collison();		// 当たり判定
		
	//--------------------------------------------------------------------
	// メンバ変数
	//--------------------------------------------------------------------
	CMove			*m_pMove;				// 移動情報
	CObject3D		*m_pIdx;				// プレイヤー番号
	ACTION_TYPE		m_EAction;				// アクションタイプ
	D3DXVECTOR3		m_rotDest;				// 目的の向き
	float			m_fSpeed;				// 移動速度	
	int				m_nNumMotion;			// 現在のモーション番号
	int				m_nNum;					// プレイヤー識別番号
	int				m_nVibCount;			// 振動カウント
	bool			m_bVib;					// 振動判定
	bool			m_bDead;				// 死ぬかどうか
	bool			m_bAction;				// 行動できるかどうか
	bool			m_bMove;				// 移動できるかどうか
#ifdef _DEBUG
	CLine **m_pLine;		// ライン情報
#endif // _DEBUG
};

#endif
