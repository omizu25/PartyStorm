//=============================================================================
//
// 3Dエフェクトクラス(effect3D.h)
// Author : 唐﨑結斗
// 概要 : 3Dエフェクト生成を行う
//
//=============================================================================
#ifndef _EFFECT3D_H_		// このマクロ定義がされてなかったら
#define _EFFECT3D_H_		// 二重インクルード防止のマクロ定義

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "object3D.h"

//=============================================================================
// 3Dエフェクトクラス
// Author : 唐﨑結斗
// 概要 : 3Dエフェクト生成を行うクラス
//=============================================================================
class CEffect3D : public CObject3D
{
public:
	//--------------------------------------------------------------------
	// レンダーステート計算方法の種別
	// Author : 唐﨑結斗
	// 概要 : レンダーステート計算方法の種別分けを行う
	//--------------------------------------------------------------------
	enum RENDER_MODE
	{
		MODE_NORMAL = 0,		// 通常
		MODE_ADD,				// 加算合成
		MODE_SUB,				// 減算合成
		MAX_MODE,				// 計算方法の最大数
	};

	//--------------------------------------------------------------------
	// 静的メンバ関数
	//--------------------------------------------------------------------
	static CEffect3D *Create(void);				// 2Dオブジェクトの生成

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	explicit CEffect3D();
	~CEffect3D();

	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	HRESULT Init() override;															// 初期化
	void Uninit() override;																// 終了
	void Update() override;																// 更新
	void Draw() override;																// 描画
	void SetMoveVec(const D3DXVECTOR3 moveVec) { m_moveVec = moveVec; }					// 移動方向の設定
	D3DXVECTOR3 GetMoveVec() { return m_moveVec; }										// 移動方向の取得
	void SetSpeed(const float fSpeed) { m_fSpeed = fSpeed; }							// 速度の設定
	void SetRenderMode(const RENDER_MODE renderMode) { m_renderMode = renderMode; }		// レンダーステートの計算方法の設定
	void SetLife(const int nLife);														// 寿命の設定

private:
	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	void DecreaseLife();

	//--------------------------------------------------------------------
	// メンバ変数
	//--------------------------------------------------------------------
	RENDER_MODE		m_renderMode;		// レンダーステートの計算方法
	D3DXVECTOR3		m_move;				// 移動量
	D3DXVECTOR3		m_moveVec;			// 移動方向
	D3DXVECTOR3		m_subSize;			// 大きさの減少量
	float			m_fSpeed;			// 速度
	float			m_fSubAlpha;		// アルファ値の減少量
	int				m_nLife;			// 寿命
};

#endif





